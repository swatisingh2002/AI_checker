from flask import Flask, render_template, request
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.probability import FreqDist
from collections import Counter
from nltk.corpus import stopwords
import string
import plotly.express as px
import plotly.io as pio

# Ensure necessary NLTK data packages are downloaded
nltk.download('punkt')
nltk.download('stopwords')

# Load GPT-2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

app = Flask(__name__)

def calculate_perplexity(text):
    encoded_input = tokenizer.encode(text, add_special_tokens=True, return_tensors='pt')
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    encoded_input = encoded_input.to(device)
    model.to(device)
    with torch.no_grad():
        outputs = model(encoded_input, labels=encoded_input)
        loss = outputs.loss
        perplexity = torch.exp(loss)
    return perplexity.item()

def calculate_burstiness(text):
    tokens = nltk.word_tokenize(text.lower())
    word_freq = FreqDist(tokens)
    repeated_count = sum(count > 1 for count in word_freq.values())
    burstiness_score = repeated_count / len(word_freq)
    return burstiness_score

def plot_top_repeated_words(text):
    tokens = text.split()
    stop_words = set(stopwords.words('english'))
    tokens = [token.lower() for token in tokens if token.lower() not in stop_words and token.lower() not in string.punctuation]
    word_counts = Counter(tokens)
    top_words = word_counts.most_common(15)
    words = [word for word, count in top_words]
    counts = [count for word, count in top_words]
    fig = px.bar(x=words, y=counts, labels={'x': 'Words', 'y': 'Counts'}, title='Top 15 Most Repeated Words')
    return pio.to_html(fig, full_html=False)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        text_area = request.form['text_area']
        perplexity = calculate_perplexity(text_area)
        burstiness_score = calculate_burstiness(text_area)
        plot_html = plot_top_repeated_words(text_area)

        result_message = "Text Analysis Result: Likely not generated by AI"
        if perplexity > 25000 and burstiness_score < 0.5:
            result_message = "Text Analysis Result: AI generated content"

        return render_template('result.html', text_area=text_area, perplexity=perplexity, 
                               burstiness_score=burstiness_score, result_message=result_message, plot_html=plot_html)

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
